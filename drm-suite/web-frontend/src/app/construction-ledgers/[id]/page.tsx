'use client';

import { useState, useEffect } from 'react';
import { useRouter, useParams } from 'next/navigation';
import {
  ArrowLeft,
  Building2,
  MapPin,
  Calendar,
  User,
  DollarSign,
  TrendingUp,
  TrendingDown,
  FileText,
  Package,
  Receipt,
  AlertCircle,
  Edit,
  CheckCircle,
  Clock,
  Users,
  RefreshCw,
  Download,
  FileDown,
  BarChart3,
} from 'lucide-react';
import CostDetailsTab from './CostDetailsTab';

interface ConstructionLedger {
  id: string;
  constructionNo: string;
  constructionName: string;
  constructionType: string;
  constructionCategory: string;
  customerName: string;
  customerCompany?: string;
  customerContact: string;
  constructionAddress: string;
  constructionCity: string;
  constructionPrefecture: string;
  scheduledStartDate: string;
  scheduledEndDate: string;
  actualStartDate?: string;
  actualEndDate?: string;
  constructionDays: number;
  contractAmount: number;
  taxAmount: number;
  totalContractAmount: number;
  estimateId?: string;
  estimateNo?: string;
  contractId?: string;
  contractNo?: string;
  executionBudget?: {
    materialCost: number;
    laborCost: number;
    outsourcingCost: number;
    expenseCost: number;
    totalBudget: number;
    expectedProfit: number;
    expectedProfitRate: number;
  };
  actualCost?: {
    materialCost: number;
    laborCost: number;
    outsourcingCost: number;
    expenseCost: number;
    totalCost: number;
    actualProfit: number;
    actualProfitRate: number;
  };
  costAnalysis?: {
    budgetVsActual: {
      materialVariance: number;
      laborVariance: number;
      outsourcingVariance: number;
      expenseVariance: number;
      totalVariance: number;
      varianceRate: number;
    };
    profitAnalysis: {
      profitVariance: number;
      profitVarianceRate: number;
    };
  };
  alerts?: Array<{
    type: 'cost_overrun' | 'profit_decline' | 'loss_making';
    severity: 'warning' | 'critical';
    message: string;
  }>;
  progress: {
    status: string;
    progressRate: number;
    completedWorkValue: number;
    billedAmount: number;
    receivedAmount: number;
  };
  orders?: Array<{
    orderId: string;
    orderNo: string;
    partnerName: string;
    orderAmount: number;
    status: string;
  }>;
  invoices?: Array<{
    invoiceId: string;
    invoiceNo: string;
    invoiceDate: string;
    amount: number;
    status: string;
  }>;
  salesPerson: string;
  constructionManager: string;
  status: string;
  createdAt: string;
  updatedAt: string;
  notes?: string;
}

export default function ConstructionLedgerDetailPage() {
  const router = useRouter();
  const params = useParams();
  const ledgerId = params.id as string;

  const [ledger, setLedger] = useState<ConstructionLedger | null>(null);
  const [loading, setLoading] = useState(true);
  const [activeTab, setActiveTab] = useState<
    'overview' | 'budget' | 'cost-details' | 'progress' | 'integrated'
  >('overview');

  useEffect(() => {
    if (ledgerId) {
      fetchLedger();
    }
  }, [ledgerId]);

  const fetchLedger = async () => {
    try {
      setLoading(true);
      const response = await fetch(`/api/construction-ledgers?id=${ledgerId}`, {
        cache: 'no-store', // „Ç≠„É£„ÉÉ„Ç∑„É•ÁÑ°ÂäπÂåñ
        headers: {
          'Cache-Control': 'no-cache',
        },
      });
      const data = await response.json();

      if (data.success && data.ledger) {
        setLedger(data.ledger);
        console.log('üìä Â∑•‰∫ãÂè∞Â∏≥„Éá„Éº„ÇøÂèñÂæó:', {
          id: data.ledger.id,
          actualCost: data.ledger.actualCost?.totalCost,
          executionBudget: data.ledger.executionBudget?.totalBudget,
        });
      }
    } catch (error) {
      console.error('Error fetching construction ledger:', error);
    } finally {
      setLoading(false);
    }
  };

  const getStatusLabel = (status: string) => {
    const labels: { [key: string]: string } = {
      planning: 'Ë®àÁîª‰∏≠',
      approved: 'ÊâøË™çÊ∏à„Åø',
      in_progress: 'ÊñΩÂ∑•‰∏≠',
      completed: 'ÂÆå‰∫Ü',
      suspended: '‰∏≠Êñ≠',
      cancelled: '„Ç≠„É£„É≥„Çª„É´',
    };
    return labels[status] || status;
  };

  const getStatusColor = (status: string) => {
    const colors: { [key: string]: string } = {
      planning: 'bg-gray-100 text-gray-700',
      approved: 'bg-blue-100 text-blue-700',
      in_progress: 'bg-yellow-100 text-yellow-700',
      completed: 'bg-green-100 text-green-700',
      suspended: 'bg-orange-100 text-orange-700',
      cancelled: 'bg-red-100 text-red-700',
    };
    return colors[status] || 'bg-gray-100 text-gray-700';
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto"></div>
          <p className="mt-4 text-gray-600">Ë™≠„ÅøËæº„Åø‰∏≠...</p>
        </div>
      </div>
    );
  }

  if (!ledger) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <AlertCircle className="h-12 w-12 text-gray-400 mx-auto mb-4" />
          <p className="text-gray-600">Â∑•‰∫ãÂè∞Â∏≥„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì</p>
          <button
            onClick={() => router.push('/construction-ledgers')}
            className="mt-4 text-blue-600 hover:text-blue-800"
          >
            ‰∏ÄË¶ß„Å´Êàª„Çã
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* „Éò„ÉÉ„ÉÄ„Éº */}
      <div className="bg-white border-b">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-4">
              <button
                onClick={() => router.push('/construction-ledgers')}
                className="text-gray-600 hover:text-gray-900"
              >
                <ArrowLeft className="h-6 w-6" />
              </button>
              <div>
                <div className="flex items-center gap-3">
                  <h1 className="text-2xl font-bold text-gray-900">{ledger.constructionName}</h1>
                  <span
                    className={`px-3 py-1 text-sm font-semibold rounded-full ${getStatusColor(
                      ledger.status
                    )}`}
                  >
                    {getStatusLabel(ledger.status)}
                  </span>
                </div>
                <p className="text-sm text-gray-600 mt-1">
                  Â∑•‰∫ãÁï™Âè∑: {ledger.constructionNo} | {ledger.constructionType} |{' '}
                  {ledger.constructionCategory}
                </p>
              </div>
            </div>
            <div className="flex items-center gap-3">
              {/* „ÇØ„Ç§„ÉÉ„ÇØ„Ç¢„ÇØ„Ç∑„Éß„É≥„Éú„Çø„É≥ */}
              <button
                onClick={async () => {
                  try {
                    const res = await fetch(
                      `/api/orders/sync-from-dw?drmOrderId=${ledger.id}`,
                      { cache: 'no-store' }
                    );
                    if (res.ok) {
                      alert('DW„Åã„Çâ„ÅÆ„Éá„Éº„ÇøÂêåÊúü„ÇíÈñãÂßã„Åó„Åæ„Åó„Åü');
                      await fetchLedger();
                    }
                  } catch (error) {
                    console.error('DW sync error:', error);
                  }
                }}
                className="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 transition flex items-center gap-2"
                title="DW„Åã„ÇâÊúÄÊñ∞Âéü‰æ°„ÇíÂêåÊúü"
              >
                <RefreshCw className="h-4 w-4" />
                DWÂêåÊúü
              </button>
              <button
                onClick={() => {
                  // CSVÂá∫ÂäõÂá¶ÁêÜ
                  const csvData = [
                    ['Â∑•‰∫ãÁï™Âè∑', ledger.constructionNo],
                    ['Â∑•‰∫ãÂêç', ledger.constructionName],
                    ['Â•ëÁ¥ÑÈáëÈ°ç', ledger.totalContractAmount],
                    ['‰∫àÁÆóÈáëÈ°ç', ledger.executionBudget?.totalBudget || 0],
                    ['ÂÆüÁ∏æÂéü‰æ°', ledger.actualCost?.totalCost || 0],
                  ];
                  const csv = csvData.map((row) => row.join(',')).join('\n');
                  const blob = new Blob([csv], { type: 'text/csv' });
                  const url = URL.createObjectURL(blob);
                  const a = document.createElement('a');
                  a.href = url;
                  a.download = `construction_ledger_${ledger.constructionNo}.csv`;
                  a.click();
                }}
                className="bg-gray-600 text-white px-4 py-2 rounded-lg hover:bg-gray-700 transition flex items-center gap-2"
                title="CSVÂΩ¢Âºè„Åß„Ç®„ÇØ„Çπ„Éù„Éº„Éà"
              >
                <FileDown className="h-4 w-4" />
                CSVÂá∫Âäõ
              </button>
              <button
                onClick={() => router.push(`/construction-ledgers/${ledgerId}/edit`)}
                className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition flex items-center gap-2"
              >
                <Edit className="h-5 w-5" />
                Á∑®ÈõÜ
              </button>
            </div>
          </div>
        </div>
      </div>

      {/* „Çø„Éñ„Éä„Éì„Ç≤„Éº„Ç∑„Éß„É≥ */}
      <div className="bg-white border-b">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex gap-8">
            <button
              onClick={() => setActiveTab('overview')}
              className={`py-4 border-b-2 font-medium transition ${
                activeTab === 'overview'
                  ? 'border-blue-600 text-blue-600'
                  : 'border-transparent text-gray-600 hover:text-gray-900'
              }`}
            >
              Ê¶ÇË¶Å
            </button>
            <button
              onClick={() => setActiveTab('budget')}
              className={`py-4 border-b-2 font-medium transition ${
                activeTab === 'budget'
                  ? 'border-blue-600 text-blue-600'
                  : 'border-transparent text-gray-600 hover:text-gray-900'
              }`}
            >
              ‰∫àÁÆó„ÉªÂéü‰æ°
            </button>
            <button
              onClick={() => setActiveTab('cost-details')}
              className={`py-4 border-b-2 font-medium transition ${
                activeTab === 'cost-details'
                  ? 'border-blue-600 text-blue-600'
                  : 'border-transparent text-gray-600 hover:text-gray-900'
              }`}
            >
              Âéü‰æ°ÊòéÁ¥∞
            </button>
            <button
              onClick={() => setActiveTab('progress')}
              className={`py-4 border-b-2 font-medium transition ${
                activeTab === 'progress'
                  ? 'border-blue-600 text-blue-600'
                  : 'border-transparent text-gray-600 hover:text-gray-900'
              }`}
            >
              ÈÄ≤ÊçóÁÆ°ÁêÜ
            </button>
            <button
              onClick={() => setActiveTab('integrated')}
              className={`py-4 border-b-2 font-medium transition ${
                activeTab === 'integrated'
                  ? 'border-blue-600 text-blue-600'
                  : 'border-transparent text-gray-600 hover:text-gray-900'
              }`}
            >
              Áµ±Âêà„Éì„É•„Éº
            </button>
          </div>
        </div>
      </div>

      {/* „Ç≥„É≥„ÉÜ„É≥„ÉÑ */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Ê¶ÇË¶Å„Çø„Éñ */}
        {activeTab === 'overview' && (
          <div className="space-y-6">
            {/* Â∑•‰∫ãÂü∫Êú¨ÊÉÖÂ†± */}
            <div className="bg-white rounded-lg shadow p-6">
              <h2 className="text-lg font-semibold text-gray-900 mb-4 flex items-center gap-2">
                <Building2 className="h-5 w-5 text-blue-600" />
                Â∑•‰∫ãÂü∫Êú¨ÊÉÖÂ†±
              </h2>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="text-sm text-gray-600">Â∑•‰∫ãÂêçÁß∞</label>
                  <p className="text-base font-medium text-gray-900 mt-1">
                    {ledger.constructionName}
                  </p>
                </div>
                <div>
                  <label className="text-sm text-gray-600">Â∑•‰∫ãÁ®ÆÂà•</label>
                  <p className="text-base font-medium text-gray-900 mt-1">
                    {ledger.constructionType} / {ledger.constructionCategory}
                  </p>
                </div>
                <div className="md:col-span-2">
                  <label className="text-sm text-gray-600 flex items-center gap-1">
                    <MapPin className="h-4 w-4" />
                    Â∑•‰∫ãÂ†¥ÊâÄ
                  </label>
                  <p className="text-base font-medium text-gray-900 mt-1">
                    „Äí{ledger.constructionPostalCode} {ledger.constructionPrefecture}
                    {ledger.constructionCity}
                    {ledger.constructionAddress}
                  </p>
                </div>
              </div>
            </div>

            {/* È°ßÂÆ¢ÊÉÖÂ†± */}
            <div className="bg-white rounded-lg shadow p-6">
              <h2 className="text-lg font-semibold text-gray-900 mb-4 flex items-center gap-2">
                <User className="h-5 w-5 text-blue-600" />
                È°ßÂÆ¢ÊÉÖÂ†±
              </h2>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="text-sm text-gray-600">È°ßÂÆ¢Âêç</label>
                  <p className="text-base font-medium text-gray-900 mt-1">{ledger.customerName}</p>
                </div>
                {ledger.customerCompany && (
                  <div>
                    <label className="text-sm text-gray-600">‰ºöÁ§æÂêç</label>
                    <p className="text-base font-medium text-gray-900 mt-1">
                      {ledger.customerCompany}
                    </p>
                  </div>
                )}
                <div>
                  <label className="text-sm text-gray-600">ÈÄ£Áµ°ÂÖà</label>
                  <p className="text-base font-medium text-gray-900 mt-1">
                    {ledger.customerContact}
                  </p>
                </div>
              </div>
            </div>

            {/* Â∑•ÊúüÊÉÖÂ†± */}
            <div className="bg-white rounded-lg shadow p-6">
              <h2 className="text-lg font-semibold text-gray-900 mb-4 flex items-center gap-2">
                <Calendar className="h-5 w-5 text-blue-600" />
                Â∑•ÊúüÊÉÖÂ†±
              </h2>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="text-sm text-gray-600">ÁùÄÂ∑•‰∫àÂÆöÊó•</label>
                  <p className="text-base font-medium text-gray-900 mt-1">
                    {ledger.scheduledStartDate}
                  </p>
                  {ledger.actualStartDate && (
                    <p className="text-sm text-blue-600 mt-1">
                      ÂÆüÈöõ: {ledger.actualStartDate}
                    </p>
                  )}
                </div>
                <div>
                  <label className="text-sm text-gray-600">ÂÆå‰∫Ü‰∫àÂÆöÊó•</label>
                  <p className="text-base font-medium text-gray-900 mt-1">
                    {ledger.scheduledEndDate}
                  </p>
                  {ledger.actualEndDate && (
                    <p className="text-sm text-blue-600 mt-1">ÂÆüÈöõ: {ledger.actualEndDate}</p>
                  )}
                </div>
                <div>
                  <label className="text-sm text-gray-600">Â∑•ÊúüÊó•Êï∞</label>
                  <p className="text-base font-medium text-gray-900 mt-1">
                    {ledger.constructionDays}Êó•
                  </p>
                </div>
              </div>
            </div>

            {/* Â•ëÁ¥ÑÈáëÈ°ç */}
            <div className="bg-white rounded-lg shadow p-6">
              <h2 className="text-lg font-semibold text-gray-900 mb-4 flex items-center gap-2">
                <DollarSign className="h-5 w-5 text-blue-600" />
                Â•ëÁ¥ÑÈáëÈ°ç
              </h2>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                <div>
                  <label className="text-sm text-gray-600">Â•ëÁ¥ÑÈáëÈ°çÔºàÁ®éÊäúÔºâ</label>
                  <p className="text-lg font-bold text-gray-900 mt-1">
                    ¬•{ledger.contractAmount.toLocaleString()}
                  </p>
                </div>
                <div>
                  <label className="text-sm text-gray-600">Ê∂àË≤ªÁ®é</label>
                  <p className="text-lg font-bold text-gray-900 mt-1">
                    ¬•{ledger.taxAmount.toLocaleString()}
                  </p>
                </div>
                <div>
                  <label className="text-sm text-gray-600">Â•ëÁ¥ÑÈáëÈ°çÔºàÁ®éËæºÔºâ</label>
                  <p className="text-xl font-bold text-blue-600 mt-1">
                    ¬•{ledger.totalContractAmount.toLocaleString()}
                  </p>
                </div>
              </div>
            </div>

            {/* ÊãÖÂΩìËÄÖ */}
            <div className="bg-white rounded-lg shadow p-6">
              <h2 className="text-lg font-semibold text-gray-900 mb-4 flex items-center gap-2">
                <Users className="h-5 w-5 text-blue-600" />
                ÊãÖÂΩìËÄÖ
              </h2>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="text-sm text-gray-600">Âñ∂Ê•≠ÊãÖÂΩì</label>
                  <p className="text-base font-medium text-gray-900 mt-1">{ledger.salesPerson}</p>
                </div>
                <div>
                  <label className="text-sm text-gray-600">ÊñΩÂ∑•ÁÆ°ÁêÜÊãÖÂΩì</label>
                  <p className="text-base font-medium text-gray-900 mt-1">
                    {ledger.constructionManager}
                  </p>
                </div>
              </div>
            </div>

            {/* „É°„É¢ */}
            {ledger.notes && (
              <div className="bg-white rounded-lg shadow p-6">
                <h2 className="text-lg font-semibold text-gray-900 mb-4">ÂÇôËÄÉ</h2>
                <p className="text-gray-700 whitespace-pre-wrap">{ledger.notes}</p>
              </div>
            )}

            {/* üî• Áô∫Ê≥®„Çµ„Éû„É™„Éº */}
            {ledger.orders && ledger.orders.length > 0 && (
              <div className="bg-white rounded-lg shadow p-6">
                <div className="flex items-center justify-between mb-4">
                  <h2 className="text-lg font-semibold text-gray-900 flex items-center gap-2">
                    <Package className="h-5 w-5 text-blue-600" />
                    Áô∫Ê≥®„Çµ„Éû„É™„Éº ({ledger.orders.length}‰ª∂)
                  </h2>
                  <button
                    onClick={() => setActiveTab('integrated')}
                    className="text-sm text-blue-600 hover:text-blue-800"
                  >
                    Ë©≥Á¥∞„ÇíË¶ã„Çã ‚Üí
                  </button>
                </div>
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                  {ledger.orders.slice(0, 6).map((order) => (
                    <div
                      key={order.orderId}
                      className="p-4 border border-gray-200 rounded-lg hover:border-blue-300 transition cursor-pointer"
                      onClick={() => router.push(`/orders/${order.orderId}`)}
                    >
                      <div className="flex items-start justify-between mb-2">
                        <div className="text-sm font-medium text-gray-900">{order.orderNo}</div>
                        <span
                          className={`text-xs px-2 py-1 rounded ${
                            order.status === 'completed'
                              ? 'bg-green-100 text-green-700'
                              : order.status === 'in_progress'
                              ? 'bg-blue-100 text-blue-700'
                              : 'bg-gray-100 text-gray-700'
                          }`}
                        >
                          {order.status}
                        </span>
                      </div>
                      <div className="text-xs text-gray-600 mb-2">{order.partnerName}</div>
                      <div className="text-base font-bold text-gray-900">
                        ¬•{order.orderAmount.toLocaleString()}
                      </div>
                    </div>
                  ))}
                </div>
                {ledger.orders.length > 6 && (
                  <div className="text-center mt-4">
                    <button
                      onClick={() => setActiveTab('integrated')}
                      className="text-sm text-blue-600 hover:text-blue-800"
                    >
                      ‰ªñ {ledger.orders.length - 6} ‰ª∂„ÅÆÁô∫Ê≥®„ÇíË°®Á§∫ ‚Üí
                    </button>
                  </div>
                )}
              </div>
            )}

            {/* üî• Ë´ãÊ±Ç„Çµ„Éû„É™„Éº */}
            {ledger.invoices && ledger.invoices.length > 0 && (
              <div className="bg-white rounded-lg shadow p-6">
                <div className="flex items-center justify-between mb-4">
                  <h2 className="text-lg font-semibold text-gray-900 flex items-center gap-2">
                    <Receipt className="h-5 w-5 text-blue-600" />
                    Ë´ãÊ±Ç„Çµ„Éû„É™„Éº ({ledger.invoices.length}‰ª∂)
                  </h2>
                  <button
                    onClick={() => setActiveTab('integrated')}
                    className="text-sm text-blue-600 hover:text-blue-800"
                  >
                    Ë©≥Á¥∞„ÇíË¶ã„Çã ‚Üí
                  </button>
                </div>
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                  {ledger.invoices.slice(0, 6).map((invoice) => (
                    <div
                      key={invoice.invoiceId}
                      className="p-4 border border-gray-200 rounded-lg hover:border-blue-300 transition cursor-pointer"
                      onClick={() => router.push(`/invoices/${invoice.invoiceId}`)}
                    >
                      <div className="flex items-start justify-between mb-2">
                        <div className="text-sm font-medium text-gray-900">{invoice.invoiceNo}</div>
                        <span
                          className={`text-xs px-2 py-1 rounded ${
                            invoice.status === 'paid'
                              ? 'bg-green-100 text-green-700'
                              : invoice.status === 'pending'
                              ? 'bg-yellow-100 text-yellow-700'
                              : 'bg-gray-100 text-gray-700'
                          }`}
                        >
                          {invoice.status}
                        </span>
                      </div>
                      <div className="text-xs text-gray-600 mb-2">{invoice.invoiceDate}</div>
                      <div className="text-base font-bold text-gray-900">
                        ¬•{invoice.amount.toLocaleString()}
                      </div>
                    </div>
                  ))}
                </div>
                {ledger.invoices.length > 6 && (
                  <div className="text-center mt-4">
                    <button
                      onClick={() => setActiveTab('integrated')}
                      className="text-sm text-blue-600 hover:text-blue-800"
                    >
                      ‰ªñ {ledger.invoices.length - 6} ‰ª∂„ÅÆË´ãÊ±Ç„ÇíË°®Á§∫ ‚Üí
                    </button>
                  </div>
                )}
              </div>
            )}
          </div>
        )}

        {/* ‰∫àÁÆó„ÉªÂéü‰æ°„Çø„Éñ */}
        {activeTab === 'budget' && (
          <div className="space-y-6">
            {/* üî• „Ç¢„É©„Éº„ÉàË°®Á§∫ */}
            {ledger.alerts && ledger.alerts.length > 0 && (
              <div className="space-y-3">
                {ledger.alerts.map((alert, index) => (
                  <div
                    key={index}
                    className={`rounded-lg p-4 flex items-start gap-3 ${
                      alert.severity === 'critical'
                        ? 'bg-red-50 border-2 border-red-200'
                        : 'bg-yellow-50 border-2 border-yellow-200'
                    }`}
                  >
                    <AlertCircle
                      className={`h-5 w-5 flex-shrink-0 mt-0.5 ${
                        alert.severity === 'critical' ? 'text-red-600' : 'text-yellow-600'
                      }`}
                    />
                    <div className="flex-1">
                      <div className="flex items-center gap-2">
                        <span
                          className={`text-sm font-semibold ${
                            alert.severity === 'critical' ? 'text-red-900' : 'text-yellow-900'
                          }`}
                        >
                          {alert.severity === 'critical' ? 'üî¥ ÈáçÂ§ß' : '‚ö†Ô∏è Ë≠¶Âëä'}
                        </span>
                        <span
                          className={`text-xs px-2 py-0.5 rounded-full ${
                            alert.type === 'cost_overrun'
                              ? 'bg-red-100 text-red-700'
                              : alert.type === 'profit_decline'
                              ? 'bg-orange-100 text-orange-700'
                              : 'bg-red-100 text-red-700'
                          }`}
                        >
                          {alert.type === 'cost_overrun'
                            ? 'Âéü‰æ°Ë∂ÖÈÅé'
                            : alert.type === 'profit_decline'
                            ? 'Á≤óÂà©‰Ωé‰∏ã'
                            : 'Ëµ§Â≠óÊ°à‰ª∂'}
                        </span>
                      </div>
                      <p
                        className={`text-sm mt-1 ${
                          alert.severity === 'critical' ? 'text-red-800' : 'text-yellow-800'
                        }`}
                      >
                        {alert.message}
                      </p>
                    </div>
                  </div>
                ))}
              </div>
            )}

            {/* ‰∫àÁÆóvsÂÆüÁ∏æ„Çµ„Éû„É™„Éº */}
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              <div className="bg-white rounded-lg shadow p-6">
                <div className="text-sm text-gray-600 mb-2">Â•ëÁ¥ÑÈáëÈ°ç</div>
                <div className="text-2xl font-bold text-gray-900">
                  ¬•{ledger.totalContractAmount.toLocaleString()}
                </div>
              </div>
              <div className="bg-white rounded-lg shadow p-6">
                <div className="text-sm text-gray-600 mb-2">‰∫àÁÆóÈáëÈ°ç</div>
                <div className="text-2xl font-bold text-blue-600">
                  ¬•
                  {ledger.executionBudget
                    ? ledger.executionBudget.totalBudget.toLocaleString()
                    : '-'}
                </div>
                {ledger.executionBudget && (
                  <div className="text-sm text-gray-500 mt-1">
                    Á≤óÂà©Áéá: {ledger.executionBudget.expectedProfitRate.toFixed(1)}%
                  </div>
                )}
              </div>
              <div className="bg-white rounded-lg shadow p-6">
                <div className="text-sm text-gray-600 mb-2">ÂÆüÁ∏æÂéü‰æ°</div>
                <div className="text-2xl font-bold text-green-600">
                  ¬•{ledger.actualCost ? ledger.actualCost.totalCost.toLocaleString() : '-'}
                </div>
                {ledger.actualCost && (
                  <div className="text-sm text-gray-500 mt-1">
                    Á≤óÂà©Áéá: {ledger.actualCost.actualProfitRate.toFixed(1)}%
                  </div>
                )}
              </div>
            </div>

            {/* üî• ‰∫àÁÆóvsÂÆüÁ∏æ Ë¶ñË¶öÂåñ„ÉÅ„É£„Éº„Éà */}
            {ledger.executionBudget && ledger.actualCost && (
              <div className="bg-white rounded-lg shadow p-6">
                <h2 className="text-lg font-semibold text-gray-900 mb-6 flex items-center gap-2">
                  <BarChart3 className="h-5 w-5 text-blue-600" />
                  ‰∫àÁÆóvsÂÆüÁ∏æ ÊØîËºÉ„ÉÅ„É£„Éº„Éà
                </h2>
                <div className="space-y-6">
                  {/* ÊùêÊñôË≤ª */}
                  <div>
                    <div className="flex justify-between items-center mb-2">
                      <span className="text-sm font-medium text-gray-700">ÊùêÊñôË≤ª</span>
                      <div className="flex gap-4 text-xs">
                        <span className="text-blue-600">
                          ‰∫àÁÆó: ¬•{ledger.executionBudget.materialCost.toLocaleString()}
                        </span>
                        <span className="text-green-600">
                          ÂÆüÁ∏æ: ¬•{ledger.actualCost.materialCost.toLocaleString()}
                        </span>
                      </div>
                    </div>
                    <div className="relative h-8 bg-gray-100 rounded-lg overflow-hidden">
                      <div
                        className="absolute top-0 left-0 h-full bg-blue-400 opacity-50 rounded-lg transition-all"
                        style={{
                          width: `${Math.min(
                            (ledger.executionBudget.materialCost /
                              ledger.executionBudget.totalBudget) *
                              100,
                            100
                          )}%`,
                        }}
                      ></div>
                      <div
                        className="absolute top-0 left-0 h-full bg-green-500 rounded-lg transition-all"
                        style={{
                          width: `${Math.min(
                            (ledger.actualCost.materialCost / ledger.executionBudget.totalBudget) *
                              100,
                            100
                          )}%`,
                        }}
                      ></div>
                    </div>
                  </div>

                  {/* Âä¥ÂãôË≤ª */}
                  <div>
                    <div className="flex justify-between items-center mb-2">
                      <span className="text-sm font-medium text-gray-700">Âä¥ÂãôË≤ª</span>
                      <div className="flex gap-4 text-xs">
                        <span className="text-blue-600">
                          ‰∫àÁÆó: ¬•{ledger.executionBudget.laborCost.toLocaleString()}
                        </span>
                        <span className="text-green-600">
                          ÂÆüÁ∏æ: ¬•{ledger.actualCost.laborCost.toLocaleString()}
                        </span>
                      </div>
                    </div>
                    <div className="relative h-8 bg-gray-100 rounded-lg overflow-hidden">
                      <div
                        className="absolute top-0 left-0 h-full bg-blue-400 opacity-50 rounded-lg transition-all"
                        style={{
                          width: `${Math.min(
                            (ledger.executionBudget.laborCost / ledger.executionBudget.totalBudget) *
                              100,
                            100
                          )}%`,
                        }}
                      ></div>
                      <div
                        className="absolute top-0 left-0 h-full bg-green-500 rounded-lg transition-all"
                        style={{
                          width: `${Math.min(
                            (ledger.actualCost.laborCost / ledger.executionBudget.totalBudget) * 100,
                            100
                          )}%`,
                        }}
                      ></div>
                    </div>
                  </div>

                  {/* Â§ñÊ≥®Ë≤ª */}
                  <div>
                    <div className="flex justify-between items-center mb-2">
                      <span className="text-sm font-medium text-gray-700">Â§ñÊ≥®Ë≤ª</span>
                      <div className="flex gap-4 text-xs">
                        <span className="text-blue-600">
                          ‰∫àÁÆó: ¬•{ledger.executionBudget.outsourcingCost.toLocaleString()}
                        </span>
                        <span className="text-green-600">
                          ÂÆüÁ∏æ: ¬•{ledger.actualCost.outsourcingCost.toLocaleString()}
                        </span>
                      </div>
                    </div>
                    <div className="relative h-8 bg-gray-100 rounded-lg overflow-hidden">
                      <div
                        className="absolute top-0 left-0 h-full bg-blue-400 opacity-50 rounded-lg transition-all"
                        style={{
                          width: `${Math.min(
                            (ledger.executionBudget.outsourcingCost /
                              ledger.executionBudget.totalBudget) *
                              100,
                            100
                          )}%`,
                        }}
                      ></div>
                      <div
                        className="absolute top-0 left-0 h-full bg-green-500 rounded-lg transition-all"
                        style={{
                          width: `${Math.min(
                            (ledger.actualCost.outsourcingCost /
                              ledger.executionBudget.totalBudget) *
                              100,
                            100
                          )}%`,
                        }}
                      ></div>
                    </div>
                  </div>

                  {/* ÁµåË≤ª */}
                  <div>
                    <div className="flex justify-between items-center mb-2">
                      <span className="text-sm font-medium text-gray-700">ÁµåË≤ª</span>
                      <div className="flex gap-4 text-xs">
                        <span className="text-blue-600">
                          ‰∫àÁÆó: ¬•{ledger.executionBudget.expenseCost.toLocaleString()}
                        </span>
                        <span className="text-green-600">
                          ÂÆüÁ∏æ: ¬•{ledger.actualCost.expenseCost.toLocaleString()}
                        </span>
                      </div>
                    </div>
                    <div className="relative h-8 bg-gray-100 rounded-lg overflow-hidden">
                      <div
                        className="absolute top-0 left-0 h-full bg-blue-400 opacity-50 rounded-lg transition-all"
                        style={{
                          width: `${Math.min(
                            (ledger.executionBudget.expenseCost /
                              ledger.executionBudget.totalBudget) *
                              100,
                            100
                          )}%`,
                        }}
                      ></div>
                      <div
                        className="absolute top-0 left-0 h-full bg-green-500 rounded-lg transition-all"
                        style={{
                          width: `${Math.min(
                            (ledger.actualCost.expenseCost / ledger.executionBudget.totalBudget) *
                              100,
                            100
                          )}%`,
                        }}
                      ></div>
                    </div>
                  </div>

                  {/* Âá°‰æã */}
                  <div className="flex gap-6 justify-center pt-4 border-t">
                    <div className="flex items-center gap-2">
                      <div className="w-4 h-4 bg-blue-400 opacity-50 rounded"></div>
                      <span className="text-sm text-gray-600">‰∫àÁÆó</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <div className="w-4 h-4 bg-green-500 rounded"></div>
                      <span className="text-sm text-gray-600">ÂÆüÁ∏æ</span>
                    </div>
                  </div>
                </div>
              </div>
            )}

            {/* ÂÆüË°å‰∫àÁÆóË©≥Á¥∞ */}
            {ledger.executionBudget && (
              <div className="bg-white rounded-lg shadow p-6">
                <h2 className="text-lg font-semibold text-gray-900 mb-4">ÂÆüË°å‰∫àÁÆó</h2>
                <div className="space-y-4">
                  <div className="flex justify-between items-center py-3 border-b">
                    <span className="text-gray-700">ÊùêÊñôË≤ª</span>
                    <span className="font-medium text-gray-900">
                      ¬•{ledger.executionBudget.materialCost.toLocaleString()}
                    </span>
                  </div>
                  <div className="flex justify-between items-center py-3 border-b">
                    <span className="text-gray-700">Âä¥ÂãôË≤ª</span>
                    <span className="font-medium text-gray-900">
                      ¬•{ledger.executionBudget.laborCost.toLocaleString()}
                    </span>
                  </div>
                  <div className="flex justify-between items-center py-3 border-b">
                    <span className="text-gray-700">Â§ñÊ≥®Ë≤ª</span>
                    <span className="font-medium text-gray-900">
                      ¬•{ledger.executionBudget.outsourcingCost.toLocaleString()}
                    </span>
                  </div>
                  <div className="flex justify-between items-center py-3 border-b">
                    <span className="text-gray-700">ÁµåË≤ª</span>
                    <span className="font-medium text-gray-900">
                      ¬•{ledger.executionBudget.expenseCost.toLocaleString()}
                    </span>
                  </div>
                  <div className="flex justify-between items-center py-3 bg-blue-50 px-4 rounded">
                    <span className="font-semibold text-gray-900">‰∫àÁÆóÂêàË®à</span>
                    <span className="font-bold text-blue-600 text-lg">
                      ¬•{ledger.executionBudget.totalBudget.toLocaleString()}
                    </span>
                  </div>
                  <div className="flex justify-between items-center py-3 bg-green-50 px-4 rounded">
                    <span className="font-semibold text-gray-900">‰∫àÂÆöÁ≤óÂà©</span>
                    <span className="font-bold text-green-600 text-lg">
                      ¬•{ledger.executionBudget.expectedProfit.toLocaleString()} (
                      {ledger.executionBudget.expectedProfitRate.toFixed(1)}%)
                    </span>
                  </div>
                </div>
              </div>
            )}

            {/* ÂÆüÁ∏æÂéü‰æ°Ë©≥Á¥∞ */}
            {ledger.actualCost && (
              <div className="bg-white rounded-lg shadow p-6">
                <h2 className="text-lg font-semibold text-gray-900 mb-4">ÂÆüÁ∏æÂéü‰æ°</h2>
                <div className="space-y-4">
                  <div className="flex justify-between items-center py-3 border-b">
                    <span className="text-gray-700">ÊùêÊñôË≤ª</span>
                    <span className="font-medium text-gray-900">
                      ¬•{ledger.actualCost.materialCost.toLocaleString()}
                    </span>
                  </div>
                  <div className="flex justify-between items-center py-3 border-b">
                    <span className="text-gray-700">Âä¥ÂãôË≤ª</span>
                    <span className="font-medium text-gray-900">
                      ¬•{ledger.actualCost.laborCost.toLocaleString()}
                    </span>
                  </div>
                  <div className="flex justify-between items-center py-3 border-b">
                    <span className="text-gray-700">Â§ñÊ≥®Ë≤ª</span>
                    <span className="font-medium text-gray-900">
                      ¬•{ledger.actualCost.outsourcingCost.toLocaleString()}
                    </span>
                  </div>
                  <div className="flex justify-between items-center py-3 border-b">
                    <span className="text-gray-700">ÁµåË≤ª</span>
                    <span className="font-medium text-gray-900">
                      ¬•{ledger.actualCost.expenseCost.toLocaleString()}
                    </span>
                  </div>
                  <div className="flex justify-between items-center py-3 bg-green-50 px-4 rounded">
                    <span className="font-semibold text-gray-900">ÂÆüÁ∏æÂêàË®à</span>
                    <span className="font-bold text-green-600 text-lg">
                      ¬•{ledger.actualCost.totalCost.toLocaleString()}
                    </span>
                  </div>
                  <div className="flex justify-between items-center py-3 bg-purple-50 px-4 rounded">
                    <span className="font-semibold text-gray-900">ÂÆüÁ∏æÁ≤óÂà©</span>
                    <span className="font-bold text-purple-600 text-lg">
                      ¬•{ledger.actualCost.actualProfit.toLocaleString()} (
                      {ledger.actualCost.actualProfitRate.toFixed(1)}%)
                    </span>
                  </div>
                </div>
              </div>
            )}

            {/* Âéü‰æ°Â∑ÆÁï∞ÂàÜÊûê */}
            {ledger.costAnalysis && (
              <div className="bg-white rounded-lg shadow p-6">
                <h2 className="text-lg font-semibold text-gray-900 mb-4">Âéü‰æ°Â∑ÆÁï∞ÂàÜÊûê</h2>

                {/* üî• Â∑ÆÁï∞„ÉÅ„É£„Éº„Éà */}
                <div className="mb-6 p-4 bg-gray-50 rounded-lg">
                  <div className="text-sm font-medium text-gray-700 mb-4">ÁßëÁõÆÂà•Â∑ÆÁï∞Ôºà„Éó„É©„Çπ„Åå‰∫àÁÆóÂÜÖ„ÄÅ„Éû„Ç§„Éä„Çπ„Åå‰∫àÁÆóË∂ÖÈÅéÔºâ</div>
                  <div className="space-y-3">
                    {/* ÊùêÊñôË≤ªÂ∑ÆÁï∞ */}
                    <div>
                      <div className="flex justify-between items-center mb-1">
                        <span className="text-xs text-gray-600">ÊùêÊñôË≤ª</span>
                        <span className={`text-xs font-medium ${
                          ledger.costAnalysis.budgetVsActual.materialVariance >= 0
                            ? 'text-green-600'
                            : 'text-red-600'
                        }`}>
                          {ledger.costAnalysis.budgetVsActual.materialVariance >= 0 ? '+' : ''}
                          ¬•{ledger.costAnalysis.budgetVsActual.materialVariance.toLocaleString()}
                        </span>
                      </div>
                      <div className="relative h-6 bg-gray-200 rounded">
                        <div
                          className={`absolute h-full rounded transition-all ${
                            ledger.costAnalysis.budgetVsActual.materialVariance >= 0
                              ? 'bg-green-500 left-1/2'
                              : 'bg-red-500 right-1/2'
                          }`}
                          style={{
                            width: `${Math.min(
                              Math.abs(ledger.costAnalysis.budgetVsActual.materialVariance) /
                                (ledger.executionBudget?.totalBudget || 1) *
                                50,
                              50
                            )}%`,
                          }}
                        ></div>
                        <div className="absolute left-1/2 top-0 bottom-0 w-px bg-gray-400"></div>
                      </div>
                    </div>

                    {/* Âä¥ÂãôË≤ªÂ∑ÆÁï∞ */}
                    <div>
                      <div className="flex justify-between items-center mb-1">
                        <span className="text-xs text-gray-600">Âä¥ÂãôË≤ª</span>
                        <span className={`text-xs font-medium ${
                          ledger.costAnalysis.budgetVsActual.laborVariance >= 0
                            ? 'text-green-600'
                            : 'text-red-600'
                        }`}>
                          {ledger.costAnalysis.budgetVsActual.laborVariance >= 0 ? '+' : ''}
                          ¬•{ledger.costAnalysis.budgetVsActual.laborVariance.toLocaleString()}
                        </span>
                      </div>
                      <div className="relative h-6 bg-gray-200 rounded">
                        <div
                          className={`absolute h-full rounded transition-all ${
                            ledger.costAnalysis.budgetVsActual.laborVariance >= 0
                              ? 'bg-green-500 left-1/2'
                              : 'bg-red-500 right-1/2'
                          }`}
                          style={{
                            width: `${Math.min(
                              Math.abs(ledger.costAnalysis.budgetVsActual.laborVariance) /
                                (ledger.executionBudget?.totalBudget || 1) *
                                50,
                              50
                            )}%`,
                          }}
                        ></div>
                        <div className="absolute left-1/2 top-0 bottom-0 w-px bg-gray-400"></div>
                      </div>
                    </div>

                    {/* Â§ñÊ≥®Ë≤ªÂ∑ÆÁï∞ */}
                    <div>
                      <div className="flex justify-between items-center mb-1">
                        <span className="text-xs text-gray-600">Â§ñÊ≥®Ë≤ª</span>
                        <span className={`text-xs font-medium ${
                          ledger.costAnalysis.budgetVsActual.outsourcingVariance >= 0
                            ? 'text-green-600'
                            : 'text-red-600'
                        }`}>
                          {ledger.costAnalysis.budgetVsActual.outsourcingVariance >= 0 ? '+' : ''}
                          ¬•{ledger.costAnalysis.budgetVsActual.outsourcingVariance.toLocaleString()}
                        </span>
                      </div>
                      <div className="relative h-6 bg-gray-200 rounded">
                        <div
                          className={`absolute h-full rounded transition-all ${
                            ledger.costAnalysis.budgetVsActual.outsourcingVariance >= 0
                              ? 'bg-green-500 left-1/2'
                              : 'bg-red-500 right-1/2'
                          }`}
                          style={{
                            width: `${Math.min(
                              Math.abs(ledger.costAnalysis.budgetVsActual.outsourcingVariance) /
                                (ledger.executionBudget?.totalBudget || 1) *
                                50,
                              50
                            )}%`,
                          }}
                        ></div>
                        <div className="absolute left-1/2 top-0 bottom-0 w-px bg-gray-400"></div>
                      </div>
                    </div>

                    {/* ÁµåË≤ªÂ∑ÆÁï∞ */}
                    <div>
                      <div className="flex justify-between items-center mb-1">
                        <span className="text-xs text-gray-600">ÁµåË≤ª</span>
                        <span className={`text-xs font-medium ${
                          ledger.costAnalysis.budgetVsActual.expenseVariance >= 0
                            ? 'text-green-600'
                            : 'text-red-600'
                        }`}>
                          {ledger.costAnalysis.budgetVsActual.expenseVariance >= 0 ? '+' : ''}
                          ¬•{ledger.costAnalysis.budgetVsActual.expenseVariance.toLocaleString()}
                        </span>
                      </div>
                      <div className="relative h-6 bg-gray-200 rounded">
                        <div
                          className={`absolute h-full rounded transition-all ${
                            ledger.costAnalysis.budgetVsActual.expenseVariance >= 0
                              ? 'bg-green-500 left-1/2'
                              : 'bg-red-500 right-1/2'
                          }`}
                          style={{
                            width: `${Math.min(
                              Math.abs(ledger.costAnalysis.budgetVsActual.expenseVariance) /
                                (ledger.executionBudget?.totalBudget || 1) *
                                50,
                              50
                            )}%`,
                          }}
                        ></div>
                        <div className="absolute left-1/2 top-0 bottom-0 w-px bg-gray-400"></div>
                      </div>
                    </div>
                  </div>
                </div>

                <div className="space-y-4">
                  <div className="flex justify-between items-center py-3 border-b">
                    <span className="text-gray-700">ÊùêÊñôË≤ªÂ∑ÆÁï∞</span>
                    <span
                      className={`font-medium flex items-center gap-1 ${
                        ledger.costAnalysis.budgetVsActual.materialVariance >= 0
                          ? 'text-green-600'
                          : 'text-red-600'
                      }`}
                    >
                      {ledger.costAnalysis.budgetVsActual.materialVariance >= 0 ? (
                        <TrendingUp className="h-4 w-4" />
                      ) : (
                        <TrendingDown className="h-4 w-4" />
                      )}
                      ¬•{Math.abs(ledger.costAnalysis.budgetVsActual.materialVariance).toLocaleString()}
                    </span>
                  </div>
                  <div className="flex justify-between items-center py-3 border-b">
                    <span className="text-gray-700">Âä¥ÂãôË≤ªÂ∑ÆÁï∞</span>
                    <span
                      className={`font-medium flex items-center gap-1 ${
                        ledger.costAnalysis.budgetVsActual.laborVariance >= 0
                          ? 'text-green-600'
                          : 'text-red-600'
                      }`}
                    >
                      {ledger.costAnalysis.budgetVsActual.laborVariance >= 0 ? (
                        <TrendingUp className="h-4 w-4" />
                      ) : (
                        <TrendingDown className="h-4 w-4" />
                      )}
                      ¬•{Math.abs(ledger.costAnalysis.budgetVsActual.laborVariance).toLocaleString()}
                    </span>
                  </div>
                  <div className="flex justify-between items-center py-3 border-b">
                    <span className="text-gray-700">Â§ñÊ≥®Ë≤ªÂ∑ÆÁï∞</span>
                    <span
                      className={`font-medium flex items-center gap-1 ${
                        ledger.costAnalysis.budgetVsActual.outsourcingVariance >= 0
                          ? 'text-green-600'
                          : 'text-red-600'
                      }`}
                    >
                      {ledger.costAnalysis.budgetVsActual.outsourcingVariance >= 0 ? (
                        <TrendingUp className="h-4 w-4" />
                      ) : (
                        <TrendingDown className="h-4 w-4" />
                      )}
                      ¬•
                      {Math.abs(
                        ledger.costAnalysis.budgetVsActual.outsourcingVariance
                      ).toLocaleString()}
                    </span>
                  </div>
                  <div className="flex justify-between items-center py-3 border-b">
                    <span className="text-gray-700">ÁµåË≤ªÂ∑ÆÁï∞</span>
                    <span
                      className={`font-medium flex items-center gap-1 ${
                        ledger.costAnalysis.budgetVsActual.expenseVariance >= 0
                          ? 'text-green-600'
                          : 'text-red-600'
                      }`}
                    >
                      {ledger.costAnalysis.budgetVsActual.expenseVariance >= 0 ? (
                        <TrendingUp className="h-4 w-4" />
                      ) : (
                        <TrendingDown className="h-4 w-4" />
                      )}
                      ¬•{Math.abs(ledger.costAnalysis.budgetVsActual.expenseVariance).toLocaleString()}
                    </span>
                  </div>
                  <div
                    className={`flex justify-between items-center py-3 px-4 rounded ${
                      ledger.costAnalysis.budgetVsActual.totalVariance >= 0
                        ? 'bg-green-50'
                        : 'bg-red-50'
                    }`}
                  >
                    <span className="font-semibold text-gray-900">Á∑èÂ∑ÆÁï∞</span>
                    <span
                      className={`font-bold text-lg flex items-center gap-2 ${
                        ledger.costAnalysis.budgetVsActual.totalVariance >= 0
                          ? 'text-green-600'
                          : 'text-red-600'
                      }`}
                    >
                      {ledger.costAnalysis.budgetVsActual.totalVariance >= 0 ? (
                        <TrendingUp className="h-5 w-5" />
                      ) : (
                        <TrendingDown className="h-5 w-5" />
                      )}
                      ¬•{Math.abs(ledger.costAnalysis.budgetVsActual.totalVariance).toLocaleString()}{' '}
                      ({ledger.costAnalysis.budgetVsActual.varianceRate.toFixed(1)}%)
                    </span>
                  </div>
                  <div
                    className={`flex justify-between items-center py-3 px-4 rounded ${
                      ledger.costAnalysis.profitAnalysis.profitVariance >= 0
                        ? 'bg-green-50'
                        : 'bg-red-50'
                    }`}
                  >
                    <span className="font-semibold text-gray-900">Á≤óÂà©Â∑ÆÁï∞</span>
                    <span
                      className={`font-bold text-lg flex items-center gap-2 ${
                        ledger.costAnalysis.profitAnalysis.profitVariance >= 0
                          ? 'text-green-600'
                          : 'text-red-600'
                      }`}
                    >
                      {ledger.costAnalysis.profitAnalysis.profitVariance >= 0 ? (
                        <TrendingUp className="h-5 w-5" />
                      ) : (
                        <TrendingDown className="h-5 w-5" />
                      )}
                      ¬•{Math.abs(ledger.costAnalysis.profitAnalysis.profitVariance).toLocaleString()}{' '}
                      ({ledger.costAnalysis.profitAnalysis.profitVarianceRate.toFixed(1)}%)
                    </span>
                  </div>
                </div>
              </div>
            )}
          </div>
        )}

        {/* Âéü‰æ°ÊòéÁ¥∞„Çø„Éñ */}
        {activeTab === 'cost-details' && <CostDetailsTab ledgerId={ledgerId} />}

        {/* ÈÄ≤ÊçóÁÆ°ÁêÜ„Çø„Éñ */}
        {activeTab === 'progress' && (
          <div className="space-y-6">
            {/* ÈÄ≤ÊçóÁä∂Ê≥Å */}
            <div className="bg-white rounded-lg shadow p-6">
              <h2 className="text-lg font-semibold text-gray-900 mb-4 flex items-center gap-2">
                <Clock className="h-5 w-5 text-blue-600" />
                ÈÄ≤ÊçóÁä∂Ê≥Å
              </h2>
              <div className="space-y-6">
                <div>
                  <div className="flex justify-between items-center mb-2">
                    <span className="text-gray-700">ÈÄ≤ÊçóÁéá</span>
                    <span className="font-bold text-blue-600 text-xl">
                      {ledger.progress.progressRate}%
                    </span>
                  </div>
                  <div className="w-full bg-gray-200 rounded-full h-4">
                    <div
                      className="bg-blue-600 h-4 rounded-full transition-all duration-500"
                      style={{ width: `${ledger.progress.progressRate}%` }}
                    ></div>
                  </div>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                  <div>
                    <label className="text-sm text-gray-600">Âá∫Êù•È´ò</label>
                    <p className="text-lg font-bold text-gray-900 mt-1">
                      ¬•{ledger.progress.completedWorkValue.toLocaleString()}
                    </p>
                  </div>
                  <div>
                    <label className="text-sm text-gray-600">Ë´ãÊ±ÇÊ∏à„ÅøÈáëÈ°ç</label>
                    <p className="text-lg font-bold text-gray-900 mt-1">
                      ¬•{ledger.progress.billedAmount.toLocaleString()}
                    </p>
                  </div>
                  <div>
                    <label className="text-sm text-gray-600">ÂÖ•ÈáëÊ∏à„ÅøÈáëÈ°ç</label>
                    <p className="text-lg font-bold text-green-600 mt-1">
                      ¬•{ledger.progress.receivedAmount.toLocaleString()}
                    </p>
                  </div>
                </div>
              </div>
            </div>

            {/* üî• Â∑•‰∫ã„Çø„Ç§„É†„É©„Ç§„É≥ */}
            <div className="bg-white rounded-lg shadow p-6">
              <h2 className="text-lg font-semibold text-gray-900 mb-6 flex items-center gap-2">
                <Calendar className="h-5 w-5 text-blue-600" />
                Â∑•‰∫ã„Çø„Ç§„É†„É©„Ç§„É≥
              </h2>
              <div className="space-y-6">
                {/* „Çø„Ç§„É†„É©„Ç§„É≥Ëª∏ */}
                <div className="relative">
                  {/* Ê®™Á∑ö */}
                  <div className="absolute top-8 left-0 right-0 h-1 bg-gray-200"></div>

                  {/* „Éû„Ç§„É´„Çπ„Éà„Éº„É≥ */}
                  <div className="relative grid grid-cols-4 gap-4">
                    {/* ‰∫àÂÆöÈñãÂßã */}
                    <div className="relative">
                      <div className="flex flex-col items-center">
                        <div className="w-4 h-4 rounded-full bg-blue-500 border-4 border-white shadow-md relative z-10"></div>
                        <div className="mt-3 text-center">
                          <div className="text-xs font-medium text-gray-900">‰∫àÂÆöÈñãÂßã</div>
                          <div className="text-xs text-gray-600 mt-1">
                            {ledger.scheduledStartDate}
                          </div>
                        </div>
                      </div>
                    </div>

                    {/* ÂÆüÁ∏æÈñãÂßã */}
                    <div className="relative">
                      <div className="flex flex-col items-center">
                        <div
                          className={`w-4 h-4 rounded-full border-4 border-white shadow-md relative z-10 ${
                            ledger.actualStartDate ? 'bg-green-500' : 'bg-gray-300'
                          }`}
                        ></div>
                        <div className="mt-3 text-center">
                          <div className="text-xs font-medium text-gray-900">ÂÆüÁ∏æÈñãÂßã</div>
                          <div className="text-xs text-gray-600 mt-1">
                            {ledger.actualStartDate || 'Êú™ÈñãÂßã'}
                          </div>
                        </div>
                      </div>
                    </div>

                    {/* ÁèæÂú® */}
                    <div className="relative">
                      <div className="flex flex-col items-center">
                        <div className="w-4 h-4 rounded-full bg-yellow-500 border-4 border-white shadow-md relative z-10 animate-pulse"></div>
                        <div className="mt-3 text-center">
                          <div className="text-xs font-medium text-gray-900">ÁèæÂú®</div>
                          <div className="text-xs text-gray-600 mt-1">
                            {new Date().toISOString().split('T')[0]}
                          </div>
                          <div className="text-xs font-bold text-blue-600 mt-1">
                            {ledger.progress.progressRate}%ÂÆå‰∫Ü
                          </div>
                        </div>
                      </div>
                    </div>

                    {/* ‰∫àÂÆöÂÆå‰∫Ü */}
                    <div className="relative">
                      <div className="flex flex-col items-center">
                        <div
                          className={`w-4 h-4 rounded-full border-4 border-white shadow-md relative z-10 ${
                            ledger.actualEndDate
                              ? 'bg-green-500'
                              : ledger.progress.progressRate === 100
                              ? 'bg-blue-500'
                              : 'bg-gray-300'
                          }`}
                        ></div>
                        <div className="mt-3 text-center">
                          <div className="text-xs font-medium text-gray-900">
                            {ledger.actualEndDate ? 'ÂÆüÁ∏æÂÆå‰∫Ü' : '‰∫àÂÆöÂÆå‰∫Ü'}
                          </div>
                          <div className="text-xs text-gray-600 mt-1">
                            {ledger.actualEndDate || ledger.scheduledEndDate}
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>

                {/* Â∑•ÊúüÊÉÖÂ†± */}
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4 pt-6 border-t">
                  <div className="p-4 bg-blue-50 rounded-lg">
                    <div className="text-sm text-gray-600 mb-1">‰∫àÂÆöÂ∑•Êúü</div>
                    <div className="text-lg font-bold text-blue-600">
                      {ledger.constructionDays}Êó•Èñì
                    </div>
                  </div>
                  <div className="p-4 bg-green-50 rounded-lg">
                    <div className="text-sm text-gray-600 mb-1">ÁµåÈÅéÊó•Êï∞</div>
                    <div className="text-lg font-bold text-green-600">
                      {ledger.actualStartDate
                        ? Math.floor(
                            (new Date().getTime() -
                              new Date(ledger.actualStartDate).getTime()) /
                              (1000 * 60 * 60 * 24)
                          )
                        : 0}
                      Êó•
                    </div>
                  </div>
                  <div className="p-4 bg-yellow-50 rounded-lg">
                    <div className="text-sm text-gray-600 mb-1">ÊÆãÊó•Êï∞Ôºà‰∫àÂÆöÔºâ</div>
                    <div className="text-lg font-bold text-yellow-600">
                      {Math.max(
                        0,
                        Math.floor(
                          (new Date(ledger.scheduledEndDate).getTime() - new Date().getTime()) /
                            (1000 * 60 * 60 * 24)
                        )
                      )}
                      Êó•
                    </div>
                  </div>
                </div>

                {/* ÈÄ≤Êçó„Çπ„ÉÜ„Éº„Çø„Çπ */}
                <div className="p-4 bg-gray-50 rounded-lg">
                  <div className="flex items-center justify-between">
                    <div>
                      <div className="text-sm text-gray-600">Â∑•‰∫ã„Çπ„ÉÜ„Éº„Çø„Çπ</div>
                      <div className="text-base font-semibold text-gray-900 mt-1">
                        {ledger.status === 'planning'
                          ? 'Ë®àÁîª‰∏≠'
                          : ledger.status === 'ongoing'
                          ? 'ÊñΩÂ∑•‰∏≠'
                          : ledger.status === 'completed'
                          ? 'ÂÆå‰∫Ü'
                          : ledger.status === 'suspended'
                          ? '‰∏≠Êñ≠'
                          : '‰∏çÊòé'}
                      </div>
                    </div>
                    <div className="text-right">
                      <div className="text-sm text-gray-600">ÈÄ≤ÊçóÁä∂Ê≥Å</div>
                      <div className="text-base font-semibold text-blue-600 mt-1">
                        {ledger.progress.progressRate < 25
                          ? 'ÁùÄÂ∑•ÂàùÊúü'
                          : ledger.progress.progressRate < 50
                          ? 'ÂâçÂçä'
                          : ledger.progress.progressRate < 75
                          ? '‰∏≠Áõ§'
                          : ledger.progress.progressRate < 100
                          ? 'ÁµÇÁõ§'
                          : 'ÂÆåÂ∑•'}
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Áµ±Âêà„Éì„É•„Éº„Çø„Éñ */}
        {activeTab === 'integrated' && (
          <div className="space-y-6">
            {/* Ë¶ãÁ©ç„ÉªÂ•ëÁ¥ÑÊÉÖÂ†± */}
            <div className="bg-white rounded-lg shadow p-6">
              <h2 className="text-lg font-semibold text-gray-900 mb-4 flex items-center gap-2">
                <FileText className="h-5 w-5 text-blue-600" />
                Ë¶ãÁ©ç„ÉªÂ•ëÁ¥ÑÊÉÖÂ†±
              </h2>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                {ledger.estimateId && (
                  <div>
                    <label className="text-sm text-gray-600">Ë¶ãÁ©çÁï™Âè∑</label>
                    <p className="text-base font-medium text-gray-900 mt-1">{ledger.estimateNo}</p>
                    <button
                      onClick={() => router.push(`/estimates/${ledger.estimateId}`)}
                      className="text-sm text-blue-600 hover:text-blue-800 mt-1"
                    >
                      Ë¶ãÁ©çË©≥Á¥∞„ÇíË¶ã„Çã ‚Üí
                    </button>
                  </div>
                )}
                {ledger.contractId && (
                  <div>
                    <label className="text-sm text-gray-600">Â•ëÁ¥ÑÁï™Âè∑</label>
                    <p className="text-base font-medium text-gray-900 mt-1">{ledger.contractNo}</p>
                    <button
                      onClick={() => router.push(`/contracts/${ledger.contractId}`)}
                      className="text-sm text-blue-600 hover:text-blue-800 mt-1"
                    >
                      Â•ëÁ¥ÑË©≥Á¥∞„ÇíË¶ã„Çã ‚Üí
                    </button>
                  </div>
                )}
              </div>
            </div>

            {/* Áô∫Ê≥®‰∏ÄË¶ß */}
            {ledger.orders && ledger.orders.length > 0 && (
              <div className="bg-white rounded-lg shadow p-6">
                <h2 className="text-lg font-semibold text-gray-900 mb-4 flex items-center gap-2">
                  <Package className="h-5 w-5 text-blue-600" />
                  Áô∫Ê≥®‰∏ÄË¶ß ({ledger.orders.length}‰ª∂)
                </h2>
                <div className="overflow-x-auto">
                  <table className="min-w-full divide-y divide-gray-200">
                    <thead className="bg-gray-50">
                      <tr>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                          Áô∫Ê≥®Áï™Âè∑
                        </th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                          ÂçîÂäõ‰ºöÁ§æ
                        </th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                          Áô∫Ê≥®ÈáëÈ°ç
                        </th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                          „Çπ„ÉÜ„Éº„Çø„Çπ
                        </th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                          „Ç¢„ÇØ„Ç∑„Éß„É≥
                        </th>
                      </tr>
                    </thead>
                    <tbody className="bg-white divide-y divide-gray-200">
                      {ledger.orders.map((order) => (
                        <tr key={order.orderId} className="hover:bg-gray-50">
                          <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                            {order.orderNo}
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                            {order.partnerName}
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                            ¬•{order.orderAmount.toLocaleString()}
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                            {order.status}
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm">
                            <button
                              onClick={() => router.push(`/orders/${order.orderId}`)}
                              className="text-blue-600 hover:text-blue-900"
                            >
                              Ë©≥Á¥∞
                            </button>
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              </div>
            )}

            {/* Ë´ãÊ±Ç‰∏ÄË¶ß */}
            {ledger.invoices && ledger.invoices.length > 0 && (
              <div className="bg-white rounded-lg shadow p-6">
                <h2 className="text-lg font-semibold text-gray-900 mb-4 flex items-center gap-2">
                  <Receipt className="h-5 w-5 text-blue-600" />
                  Ë´ãÊ±Ç‰∏ÄË¶ß ({ledger.invoices.length}‰ª∂)
                </h2>
                <div className="overflow-x-auto">
                  <table className="min-w-full divide-y divide-gray-200">
                    <thead className="bg-gray-50">
                      <tr>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                          Ë´ãÊ±ÇÁï™Âè∑
                        </th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                          Ë´ãÊ±ÇÊó•
                        </th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                          Ë´ãÊ±ÇÈáëÈ°ç
                        </th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                          „Çπ„ÉÜ„Éº„Çø„Çπ
                        </th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                          „Ç¢„ÇØ„Ç∑„Éß„É≥
                        </th>
                      </tr>
                    </thead>
                    <tbody className="bg-white divide-y divide-gray-200">
                      {ledger.invoices.map((invoice) => (
                        <tr key={invoice.invoiceId} className="hover:bg-gray-50">
                          <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                            {invoice.invoiceNo}
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                            {invoice.invoiceDate}
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                            ¬•{invoice.amount.toLocaleString()}
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                            {invoice.status}
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm">
                            <button
                              onClick={() => router.push(`/invoices/${invoice.invoiceId}`)}
                              className="text-blue-600 hover:text-blue-900"
                            >
                              Ë©≥Á¥∞
                            </button>
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              </div>
            )}
          </div>
        )}
      </div>
    </div>
  );
}
